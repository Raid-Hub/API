generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Activity {
  flawless                 Boolean?
  completed                Boolean
  fresh                    Boolean?
  playerCount              Int                        @map("player_count")
  dateStarted              DateTime                   @map("date_started")
  dateCompleted            DateTime                   @map("date_completed")
  instanceId               BigInt                     @id @unique @map("instance_id")
  raidHash                 BigInt                     @map("raid_hash")
  activityLeaderboardEntry ActivityLeaderboardEntry[]
  playerActivity           PlayerActivity[]           @relation("player_activities")

  @@index([dateCompleted(sort: Desc)], map: "date_index")
  @@index([instanceId])
  @@map("activity")
}

/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model Player {
  membershipType              Int?             @map("membership_type")
  iconPath                    String?          @map("icon_path")
  displayName                 String?          @map("display_name")
  bungieGlobalDisplayName     String?          @map("bungie_global_display_name")
  bungieGlobalDisplayNameCode String?          @map("bungie_global_display_name_code")
  lastSeen                    DateTime         @map("last_seen")
  clears                      Int              @default(0) @map("clears")
  membershipId                BigInt           @id @unique(map: "player_membership_id_new_key") @map("membership_id")
  playerActivities            PlayerActivity[] @relation("player_activities")

  @@index([bungieGlobalDisplayName, bungieGlobalDisplayNameCode], map: "bungie_name_index")
  @@map("player")
}

model PlayerActivity {
  id                String   @id @default(uuid())
  finishedRaid      Boolean  @map("finished_raid")
  kills             Int      @default(0)
  assists           Int      @default(0)
  deaths            Int      @default(0)
  timePlayedSeconds Int      @default(0) @map("time_played_seconds")
  instanceId        BigInt   @map("instance_id")
  membershipId      BigInt   @map("membership_id")
  activity          Activity @relation("player_activities", fields: [instanceId], references: [instanceId])
  player            Player   @relation("player_activities", fields: [membershipId], references: [membershipId], map: "player_activity_membership_id_new_fkey")

  @@unique([instanceId, membershipId], map: "player_activity_instance_id_membership_id_new_key")
  @@index([instanceId], map: "idx_instance_id")
  @@index([membershipId], map: "idx_membership_id")
  @@map("player_activity")
}

model ActivityLeaderboard {
  id      String                     @id @unique
  entries ActivityLeaderboardEntry[] @relation("activity_leaderboard_entry_fk")

  @@map("leaderboard")
}

model ActivityLeaderboardEntry {
  id            String              @id @default(uuid())
  rank          Int                 @default(autoincrement())
  leaderboardId String              @map("leaderboard_id")
  instanceId    BigInt              @map("instance_id")
  activity      Activity            @relation(fields: [instanceId], references: [instanceId])
  leaderboard   ActivityLeaderboard @relation("activity_leaderboard_entry_fk", fields: [leaderboardId], references: [id], onDelete: Cascade)

  @@unique([id, rank], name: "activity_leaderboard_entry_unique_index")
  @@index([leaderboardId], map: "activity_leaderboard_entry_leaderboard_id_index", type: Hash)
  @@index([instanceId], map: "activity_leaderboard_entry_instance_id_index", type: Hash)
  @@map("activity_leaderboard_entry")
}
