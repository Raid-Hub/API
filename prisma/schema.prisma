// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model RawPGCR {
  id      String @id @unique(sort: Desc)
  rawJson Json   @map("raw_json")

  @@map("raw_pgcr")
}

model Activity {
  activityId         String                     @id @map("activity_id")
  raidHash           String                     @map("raid_hash")
  flawless           Boolean?
  completed          Boolean
  fresh              Boolean?
  playerCount        Int                        @map("player_count")
  dateStarted        DateTime                   @map("date_started")
  dateCompleted      DateTime                   @map("date_completed")
  playerActivities   PlayerActivity[]           @relation("player_activity")
  leaderboardEntries ActivityLeaderboardEntry[] @relation("activity_leaderboard_entry_fk")

  @@index(activityId, type: Hash)
  @@index(dateCompleted(sort: Desc), name: "date_index")
  @@map("activity")
}

model Player {
  membershipId                String           @id @unique @map("membership_id")
  membershipType              Int?             @map("membership_type")
  iconPath                    String?          @map("icon_path")
  displayName                 String?          @map("display_name")
  bungieGlobalDisplayName     String?          @map("bungie_global_display_name")
  bungieGlobalDisplayNameCode String?          @map("bungie_global_display_name_code")
  lastSeen                    DateTime         @map("last_seen")
  clears                      Int              @default(0) @map("clears")
  playerActivities            PlayerActivity[] @relation("player_activity")

  @@index(membershipId, type: Hash)
  @@index([bungieGlobalDisplayName, bungieGlobalDisplayNameCode], name: "bungie_name_index")
  @@map("player")
}

model PlayerActivity {
  id                String   @id @default(uuid())
  activityId        String   @map("activity_id")
  membershipId      String   @map("membership_id")
  activity          Activity @relation(fields: [activityId], references: [activityId], "player_activity")
  player            Player   @relation(fields: [membershipId], references: [membershipId], "player_activity")
  finishedRaid      Boolean  @map("finished_raid")
  kills             Int      @default(0)
  assists           Int      @default(0)
  deaths            Int      @default(0)
  timePlayedSeconds Int      @default(0) @map("time_played_seconds")

  @@unique([activityId, membershipId], name: "activity_player_index")
  @@index(activityId, name: "activity_id_index", type: Hash)
  @@index(membershipId, name: "membership_id_index", type: Hash)
  @@map("player_activity")
}

model ActivityLeaderboard {
  id      String                     @id @unique
  entries ActivityLeaderboardEntry[] @relation("activity_leaderboard_entry_fk")

  @@map("leaderboard")
}

model ActivityLeaderboardEntry {
  id            String              @id @default(uuid())
  rank          Int                 @default(autoincrement())
  leaderboardId String              @map("leaderboard_id")
  leaderboard   ActivityLeaderboard @relation(fields: [leaderboardId], references: [id], name: "activity_leaderboard_entry_fk", onDelete: Cascade)
  activityId    String              @map("activity_id")
  activity      Activity            @relation(fields: [activityId], references: [activityId], name: "activity_leaderboard_entry_fk")

  @@unique([id, rank], name: "activity_leaderboard_entry_unique_index")
  @@index(leaderboardId, name: "activity_leaderboard_entry_leaderboard_id_index")
  @@index(activityId, name: "activity_leaderboard_entry_activity_id_index", type: Hash)
  @@map("activity_leaderboard_entry")
}
