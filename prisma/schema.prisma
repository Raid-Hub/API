generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views", "relationJoins"]
  binaryTargets   = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model Player {
  membershipId                BigInt                  @id @map("membership_id")
  membershipType              Int?                    @map("membership_type")
  iconPath                    String?                 @map("icon_path")
  displayName                 String?                 @map("display_name")
  bungieGlobalDisplayName     String?                 @map("bungie_global_display_name")
  bungieGlobalDisplayNameCode String?                 @map("bungie_global_display_name_code")
  bungieName                  String?                 @default(dbgenerated("\nCASE\n    WHEN ((bungie_global_display_name IS NOT NULL) AND (bungie_global_display_name_code IS NOT NULL)) THEN ((bungie_global_display_name || '#'::text) || bungie_global_display_name_code)\n    ELSE display_name\nEND")) @map("bungie_name")
  lastSeen                    DateTime                @map("last_seen")
  clears                      Int                     @default(0) @map("clears")
  fullClears                  Int                     @default(0) @map("fresh_clears")
  sherpas                     Int                     @default(0) @map("sherpas")
  sumOfBestTimes              Int?                    @map("sum_of_best")
  lastCrawled                 DateTime?               @map("last_crawled")
  searchScore                 Decimal?                @default(dbgenerated("(sqrt(((clears + 1))::double precision) * power((2)::double precision, (GREATEST((0)::double precision, date_part('epoch'::text, (last_seen - '2017-08-27 00:00:00'::timestamp without time zone))) / (20000000)::double precision)))")) @map("_search_score") @db.Decimal
  activityCharacter           ActivityCharacter[]
  activityPlayer              ActivityPlayer[]
  stats                       PlayerStats[]           @relation("player_stats_membership_id")
  individualLeaderboards      IndividualLeaderboard[] @relation("individual_leaderboard")
  globalLeaderboard           GlobalLeaderboard?      @relation("global_leaderboard")

  @@map("player")
}

model PlayerStats {
  membershipId               BigInt             @map("membership_id")
  activity_id                Int
  clears                     Int                @default(0)
  fullClears                 Int                @default(0) @map("fresh_clears")
  sherpas                    Int                @default(0)
  trios                      Int                @default(0)
  duos                       Int                @default(0)
  solos                      Int                @default(0)
  fastestFullClearInstanceId BigInt?            @map("fastest_instance_id")
  player                     Player             @relation("player_stats_membership_id", fields: [membershipId], references: [membershipId], onUpdate: NoAction, map: "player_membership_id_fkey")
  fastestClear               Activity?          @relation("fastest_raid_clear", fields: [fastestFullClearInstanceId], references: [instanceId])
  activityDefinition         ActivityDefinition @relation(fields: [activity_id], references: [id], onUpdate: NoAction, map: "raid_id_fkey")

  @@id([membershipId, activity_id])
  @@map("player_stats")
}

model ActivityDefinition {
  id                     Int                     @id(map: "raid_pkey")
  name                   String
  isSunset               Boolean                 @default(false) @map("is_sunset")
  isRaid                 Boolean                 @default(true) @map("is_raid")
  activityHash           ActivityHash[]
  leaderboards           ActivityLeaderboard[]   @relation("leaderboards")
  playerStats            PlayerStats[]
  versionDefinition      VersionDefinition[]
  individualLeaderboards IndividualLeaderboard[] @relation("individual_leaderboard")

  @@map("activity_definition")
}

model ActivityHash {
  hash               BigInt             @id(map: "raid_definition_pkey")
  activityId         Int                @map("activity_id")
  versionId          Int                @map("version_id")
  activity           Activity[]
  activityDefinition ActivityDefinition @relation(fields: [activityId], references: [id], map: "raid_definition_raid_id_fkey")
  versionDefinition  VersionDefinition  @relation(fields: [versionId], references: [id], map: "raid_definition_version_id_fkey")

  @@index([activityId], map: "idx_raid_definition_raid_id")
  @@index([versionId], map: "idx_raid_definition_version_id")
  @@map("activity_hash")
}

model VersionDefinition {
  id                   Int                 @id(map: "raid_version_pkey")
  name                 String
  associatedActivityId Int?                @map("associated_activity_id")
  activityHash         ActivityHash[]
  activityDefinition   ActivityDefinition? @relation(fields: [associatedActivityId], references: [id], map: "raid_version_associated_raid_id_fkey")

  @@map("version_definition")
}

model Activity {
  instanceId                 BigInt                     @id @map("instance_id")
  hash                       BigInt
  flawless                   Boolean?
  completed                  Boolean
  fresh                      Boolean?
  playerCount                Int                        @map("player_count")
  dateStarted                DateTime                   @map("date_started")
  dateCompleted              DateTime                   @map("date_completed")
  duration                   Int
  platformType               Int                        @map("platform_type")
  score                      Int                        @default(0)
  activityHash               ActivityHash               @relation(fields: [hash], references: [hash], onDelete: NoAction, onUpdate: NoAction, map: "activity_hash_fk")
  activityCharacters         ActivityCharacter[]
  activityCharacterWeapons   ActivityCharacterWeapon[]
  activityLeaderboardEntries ActivityLeaderboardEntry[]
  activityPlayers            ActivityPlayer[]
  fastestClears              PlayerStats[]              @relation("fastest_raid_clear")

  @@index([hash, dateCompleted], map: "idx_raidhash_date_completed")
  @@index([hash, completed, fresh, duration], map: "speedrun_index")
  @@index([completed, playerCount, fresh, flawless], map: "tag_index")
  @@map("activity")
}

model ActivityPlayer {
  instanceId        BigInt   @map("instance_id")
  membershipId      BigInt   @map("membership_id")
  completed         Boolean
  timePlayedSeconds Int      @default(0) @map("time_played_seconds")
  sherpas           Int      @default(0) @map("sherpas")
  isFirstClear      Boolean  @default(false) @map("is_first_clear")
  score             Int      @default(0)
  activity          Activity @relation(fields: [instanceId], references: [instanceId], onUpdate: NoAction, map: "player_activity_instance_id_fkey")
  player            Player   @relation(fields: [membershipId], references: [membershipId], onUpdate: NoAction, map: "player_activity_membership_id_fkey")

  @@id([instanceId, membershipId], map: "player_activity_instance_id_membership_id_pkey")
  @@index([membershipId], map: "idx_membership_id")
  @@map("activity_player")
}

model ActivityCharacter {
  instanceId        BigInt   @map("instance_id")
  membershipId      BigInt   @map("membership_id")
  characterId       BigInt   @map("character_id")
  classHash         BigInt?  @map("class_hash")
  completed         Boolean
  completionReason  Int      @map("completion_reason")
  score             Int      @default(0)
  kills             Int      @default(0)
  assists           Int      @default(0)
  deaths            Int      @default(0)
  precisionKills    Int      @default(0) @map("precision_kills")
  superKills        Int      @default(0) @map("super_kills")
  grenadeKills      Int      @default(0) @map("grenade_kills")
  meleeKills        Int      @default(0) @map("melee_kills")
  timePlayedSeconds Int      @map("time_played_seconds")
  startSeconds      Int      @map("start_seconds")
  activity          Activity @relation(fields: [instanceId], references: [instanceId], onUpdate: NoAction)
  player            Player   @relation(fields: [membershipId], references: [membershipId], onUpdate: NoAction)

  @@id([instanceId, characterId])
  @@index([membershipId], map: "activity_character_idx_membership_id")
  @@map("activity_character")
}

model ActivityCharacterWeapon {
  instanceId     BigInt   @map("instance_id")
  characterId    BigInt   @map("character_id")
  weaponHash     BigInt   @map("weapon_hash")
  kills          Int      @default(0) @map("kills")
  precisionKills Int      @default(0) @map("precision_kills")
  activity       Activity @relation(fields: [instanceId], references: [instanceId], onUpdate: NoAction)

  @@id([instanceId, characterId, weaponHash])
  @@index([weaponHash], map: "activity_character_weapon_idx_weapon_hash")
  @@map("activity_character_weapon")
}

model ActivityLeaderboard {
  id           String                     @id
  raidId       Int                        @map("raid_id")
  date         DateTime                   @map("date")
  isWorldFirst Boolean                    @default(false) @map("is_world_first")
  type         WorldFirstLeaderboardType  @map("type")
  entries      ActivityLeaderboardEntry[] @relation("activity_leaderboard_entry_fk")
  activity     ActivityDefinition         @relation("leaderboards", fields: [raidId], references: [id])

  @@unique([raidId, type], map: "leaderboard_raid_hash_type_key")
  @@map("leaderboard")
}

model ActivityLeaderboardEntry {
  rank          Int
  position      Int
  leaderboardId String              @map("leaderboard_id")
  instanceId    BigInt              @map("instance_id")
  activity      Activity            @relation(fields: [instanceId], references: [instanceId], onDelete: NoAction, onUpdate: NoAction)
  leaderboard   ActivityLeaderboard @relation("activity_leaderboard_entry_fk", fields: [leaderboardId], references: [id], onDelete: Cascade)

  @@id([leaderboardId, instanceId])
  @@index([leaderboardId, position], map: "activity_leaderboard_position")
  @@index([instanceId], map: "activity_leaderboard_entry_instance_id_index")
  @@map("activity_leaderboard_entry")
}

model PGCR {
  instanceId   BigInt    @id @map("instance_id")
  data         Bytes
  date_crawled DateTime? @default(now()) @db.Timestamp(6)

  @@map("pgcr")
}

model migrations {
  id         Int       @id
  name       String
  applied_at DateTime? @default(now()) @db.Timestamp(6)

  @@map("_migrations")
}

enum WorldFirstLeaderboardType {
  Normal
  Challenge
  Prestige
  Master
}

view IndividualLeaderboard {
  raidId       Int                @map("raid_id")
  membershipId BigInt             @map("membership_id")
  activity     ActivityDefinition @relation("individual_leaderboard", fields: [raidId], references: [id])
  player       Player             @relation("individual_leaderboard", fields: [membershipId], references: [membershipId])

  clears             Int
  clearsPosition     Int @map("clears_position")
  clearsRank         Int @map("clears_rank")
  fullClears         Int @map("fresh_clears")
  fullClearsPosition Int @map("fresh_clears_position")
  fullClearsRank     Int @map("fresh_clears_rank")
  sherpas            Int
  sherpasPosition    Int @map("sherpas_position")
  sherpasRank        Int @map("sherpas_rank")
  trios              Int
  triosPosition      Int @map("trios_position")
  triosRank          Int @map("trios_rank")
  duos               Int
  duosPosition       Int @map("duos_position")
  duosRank           Int @map("duos_rank")
  solos              Int
  solosPosition      Int @map("solos_position")
  solosRank          Int @map("solos_rank")

  @@unique([raidId(sort: Desc), membershipId(sort: Asc)], name: "uniqueRaidMembershipId", map: "idx_individual_leaderboard_clears_membership_id")
  @@unique([raidId(sort: Desc), clearsPosition(sort: Asc)], map: "idx_individual_leaderboard_clears")
  @@unique([raidId(sort: Desc), fullClearsPosition(sort: Asc)], map: "idx_individual_leaderboard_fresh_clears")
  @@unique([raidId(sort: Desc), sherpasPosition(sort: Asc)], map: "idx_individual_leaderboard_sherpas")
  @@unique([raidId(sort: Desc), triosPosition(sort: Asc)], map: "idx_individual_leaderboard_trios")
  @@unique([raidId(sort: Desc), duos(Positionsort: Asc)], map: "idx_individual_leaderboard_duos")
  @@unique([raidId(sort: Desc), solosPosition(sort: Asc)], map: "idx_individual_leaderboard_solos")
  @@map("individual_leaderboard")
}

view GlobalLeaderboard {
  membershipId BigInt @unique @map("membership_id")
  player       Player @relation("global_leaderboard", fields: [membershipId], references: [membershipId])

  clears             Int
  clearsPosition     Int  @unique @map("clears_position")
  clearsRank         Int  @map("clears_rank")
  fullClears         Int  @map("fresh_clears")
  fullClearsPosition Int  @unique @map("fresh_clears_position")
  fullClearsRank     Int  @map("fresh_clears_rank")
  sherpas            Int
  sherpasPosition    Int  @unique @map("sherpas_position")
  sherpasRank        Int  @map("sherpas_rank")
  speed              Int?
  speedPosition      Int  @unique @map("speed_position")
  speedRank          Int  @map("speed_rank")

  @@map("global_leaderboard")
}

view WorldFirstPlayerRanking {
  membershipId Int   @unique @map("membership_id")
  score        Float
  rank         Int

  @@index([rank(Sort: Asc)], map: "idx_world_first_player_ranking_rank")
  @@map("world_first_player_ranking")
}
