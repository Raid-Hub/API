generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Activity {
  instanceId               BigInt                     @id @map("instance_id")
  raidHash                 BigInt                     @map("raid_hash")
  flawless                 Boolean?
  completed                Boolean
  fresh                    Boolean?
  playerCount              Int                        @map("player_count")
  dateStarted              DateTime                   @map("date_started")
  dateCompleted            DateTime                   @map("date_completed")
  duration                 Int                        
  platformType             Int                        @map("platform_type")
  raidDefinition           RaidDefinition             @relation("raid_defintion", fields: [raidHash], references: [raidHash], onDelete: NoAction, onUpdate: NoAction)
  activityLeaderboardEntry ActivityLeaderboardEntry[]
  playerActivity           PlayerActivity[]           @relation("player_activities")

  @@index([raidHash, dateCompleted(Sort: Asc)], map: "idx_raidhash_date_completed")
  @@index([dateCompleted(sort: Desc)], map: "date_index")
  @@index([raidHash, completed, fresh, duration(sort: Asc)], map: "speedrun_index")
  @@index([completed, playerCount, fresh, flawless], map: "tag_index")
  @@map("activity")
}

/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model Player {
  membershipId                BigInt           @id @map("membership_id")
  membershipType              Int?             @map("membership_type")
  iconPath                    String?          @map("icon_path")
  displayName                 String?          @map("display_name")
  bungieGlobalDisplayName     String?          @map("bungie_global_display_name")
  bungieGlobalDisplayNameCode String?          @map("bungie_global_display_name_code")
  lastSeen                    DateTime         @map("last_seen")
  clears                      Int              @default(0) @map("clears")
  fullClears                  Int              @default(0) @map("fresh_clears")
  sherpas                     Int              @default(0) @map("sherpas")
  playerActivities            PlayerActivity[] @relation("player_activities")
  stats                       PlayerStats[]    @relation("player_stats_membership_id")

  @@index([clears(sort: Desc)], map: "total_clears_idx")
  @@index([fullClears(sort: Desc)], map: "total_fresh_clears_idx")
  @@index([sherpas(sort: Desc)], map: "total_sherpas_idx")
  @@index([displayName(ops: raw("gin_trgm_ops")), bungieGlobalDisplayName(ops: raw("gin_trgm_ops"))], map: "trgm_idx_both_display_names", type: Gin)
  @@index([bungieGlobalDisplayName(ops: raw("gin_trgm_ops"))], map: "trgm_idx_bungie_global_display_name", type: Gin)
  @@index([bungieGlobalDisplayName(ops: raw("gin_trgm_ops")), bungieGlobalDisplayNameCode(ops: raw("gin_trgm_ops"))], map: "trgm_idx_bungie_global_name_and_code", type: Gin)
  @@index([displayName(ops: raw("gin_trgm_ops"))], map: "trgm_idx_display_name", type: Gin)
  @@map("player")
}

model PlayerActivity {
  instanceId        BigInt   @map("instance_id")
  membershipId      BigInt   @map("membership_id")
  finishedRaid      Boolean  @map("finished_raid")
  kills             Int      @default(0)
  assists           Int      @default(0)
  deaths            Int      @default(0)
  timePlayedSeconds Int      @default(0) @map("time_played_seconds")
  classHash         BigInt?  @map("class_hash")
  sherpas           Int      @default(0)
  isFirstClear      Boolean  @default(false) @map("is_first_clear")
  activity          Activity @relation("player_activities", fields: [instanceId], references: [instanceId], onDelete: Cascade, onUpdate: NoAction, map: "player_activity_instance_id_fkey")
  player            Player   @relation("player_activities", fields: [membershipId], references: [membershipId], onDelete: Restrict, onUpdate: NoAction, map: "player_activity_membership_id_fkey")

  @@id([instanceId, membershipId], map: "player_activity_instance_id_membership_id_pkey")
  @@index([instanceId], map: "idx_instance_id")
  @@index([membershipId], map: "idx_membership_id")
  @@map("player_activity")
}

model PlayerStats {
  membershipId BigInt @map("membership_id")
  raidId       Int    @map("raid_id")
  clears       Int    @default(0)
  fresh        Int    @default(0) @map("fresh_clears")
  sherpas      Int    @default(0)
  trios        Int    @default(0)
  duos         Int    @default(0)
  solos        Int    @default(0)
  raid         Raid   @relation("player_stats_raid", fields: [raidId], references: [id], onDelete: Restrict, onUpdate: NoAction, map: "raid_id_fkey")
  player       Player @relation("player_stats_membership_id", fields: [membershipId], references: [membershipId], onDelete: Restrict, onUpdate: NoAction, map: "player_membership_id_fkey")

  @@id([membershipId, raidId], map: "player_stats_pkey")
  @@index([raidId, clears(sort: Desc)], name: "raid_clears_idx")
  @@index([raidId, fresh(sort: Desc)], name: "raid_fresh_clears_idx")
  @@index([raidId, sherpas(sort: Desc)], name: "raid_sherpas_idx")
  @@index([raidId, trios(sort: Desc)], name: "raid_trio_clears_idx")
  @@index([raidId, duos(sort: Desc)], name: "raid_duo_clears_idx")
  @@index([raidId, solos(sort: Desc)], name: "raid_solo_clears_idx")
  @@map("player_stats")
}

enum WorldFirstLeaderboardType {
  Normal
  Challenge
  Prestige
  Master
}

model ActivityLeaderboard {
  id      String                     @id
  raidId  Int                        @map("raid_id")
  date    DateTime                   @map("date")
  type    WorldFirstLeaderboardType  @map("type")
  raid    Raid                       @relation("leaderboards", fields: [raidId], references: [id], onDelete: Restrict)
  entries ActivityLeaderboardEntry[] @relation("activity_leaderboard_entry_fk")

  @@unique([raidId, type], map: "leaderboard_raid_hash_type_key")
  @@map("leaderboard")
}

model ActivityLeaderboardEntry {
  rank          Int
  leaderboardId String              @map("leaderboard_id")
  instanceId    BigInt              @map("instance_id")
  activity      Activity            @relation(fields: [instanceId], references: [instanceId], onDelete: NoAction, onUpdate: NoAction)
  leaderboard   ActivityLeaderboard @relation("activity_leaderboard_entry_fk", fields: [leaderboardId], references: [id], onDelete: Cascade)

  @@id([leaderboardId, instanceId], map: "activity_leaderboard_entry_pkey")
  @@index([leaderboardId, rank(sort: Asc)], map: "activity_leaderboard_rank")
  @@index([instanceId], map: "activity_leaderboard_entry_instance_id_index", type: Hash)
  @@map("activity_leaderboard_entry")
}

model Raid {
  id                     Int                   @id
  name                   String
  playerStats            PlayerStats[]         @relation("player_stats_raid")
  AssociatedRaidVersions RaidVersion[]         @relation("associated_raid_version")
  RaidDefinition         RaidDefinition[]      @relation("raid_name_definition")
  leaderboards           ActivityLeaderboard[] @relation("leaderboards")

  @@map("raid")
}

// This model is used to associate a raid with a specific version of that raid. For example, Normal, Prestige, Master, and Regicide. 
// Regicide might be associated exclusively with King's Fall. 
model RaidVersion {
  id               Int    @id
  name             String
  associatedRaidId Int?   @map("associated_raid_id")
  associatedRaid   Raid?  @relation("associated_raid_version", fields: [associatedRaidId], references: [id])

  RaidDefinition RaidDefinition[] @relation("raid_version_definition")

  @@map("raid_version")
}

model RaidDefinition {
  raidHash   BigInt      @id @map("hash")
  raidId     Int         @map("raid_id")
  versionId  Int         @map("version_id")
  activities Activity[]  @relation("raid_defintion")
  raid       Raid        @relation("raid_name_definition", fields: [raidId], references: [id])
  version    RaidVersion @relation("raid_version_definition", fields: [versionId], references: [id])

  @@index([raidId], map: "idx_raid_definition_raid_id")
  @@index([versionId], map: "idx_raid_definition_version_id")
  @@map("raid_definition")
}

model PGCR {
  instanceId BigInt @id @map("instance_id")
  data       Bytes

  @@map("pgcr")
}
